/* Create a unified query that categorizes job postings into two groups: 
those with salary information (salary_year_avg or salary_hour_avg is not null) and 
those without it. Each job posting should be listed with its job_id, job_title, and 
an indicator of whether salary information is provided.
Hints:
Use UNION ALL to merge results from two separate queries.
For the first query, filter job postings where either salary field is not null to identify
 postings with salary information.
For the second query, filter for postings where both salary fields are null to identify 
postings without salary information.
Include a custom field to indicate the presence or absence of salary information in the 
output.
When categorizing data, you can create a custom label directly in your query using string
 literals, such as 'With Salary Info' or 'Without Salary Info'. These literals are manually
  inserted values that indicate specific characteristics of each record. An example of 
  this is as a new column in the query that doesnâ€™t have salary information put: 'Without
   Salary Info' AS salary_info. As the last column in the SELECT statement. */


-- Select job postings with salary information
(
    SELECT 
        job_id, 
        job_title, 
        'With Salary Info' AS salary_info  -- Custom field indicating salary info presence
    FROM 
        job_postings_fact
    WHERE 
        salary_year_avg IS NOT NULL OR salary_hour_avg IS NOT NULL  
)
UNION ALL
 -- Select job postings without salary information
(
    SELECT 
        job_id, 
        job_title, 
        'Without Salary Info' AS salary_info  -- Custom field indicating absence of salary info
    FROM 
        job_postings_fact
    WHERE 
        salary_year_avg IS NULL AND salary_hour_avg IS NULL 
)
ORDER BY 
	salary_info DESC, 
	job_id; 

/* Retrieve the job id, job title short, job location, job via, skill and skill type 
for each job posting from the first quarter (January to March). Using a subquery to 
combine job postings from the first quarter (these tables were created in the Advanced 
Section - Practice Problem 6 [include timestamp of Youtube video]) Only include postings 
with an average yearly salary greater than $70,000.
Hints:
Use UNION ALL to combine job postings from January, February, and March into a single 
dataset.
Apply a LEFT JOIN to include skills information, allowing for job postings without 
associated skills to be included.
Filter the results to only include job postings with an average yearly salary above
 $70,000. */

SELECT
    job_postings_q1.job_id,
    job_postings_q1.job_title_short,
    job_postings_q1.job_location,
    job_postings_q1.job_via,
    job_postings_q1.salary_year_avg,
    skills_dim.skills,
    skills_dim.type
FROM
-- Get job postings from the first quarter of 2023
    (
        SELECT *
        FROM january_jobs
        UNION ALL
        SELECT *
        FROM february_jobs
				UNION ALL
				SELECT *
				FROM march_jobs
    ) as job_postings_q1
LEFT JOIN skills_job_dim ON job_postings_q1.job_id = skills_job_dim.job_id
LEFT JOIN skills_dim ON skills_job_dim.skill_id = skills_dim.skill_id
WHERE
    job_postings_q1.salary_year_avg > 70000
ORDER BY
	job_postings_q1.job_id;


